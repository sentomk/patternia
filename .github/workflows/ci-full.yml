name: CI - full matrix

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'
  push:
    branches:
      - main

permissions:
  contents: read

env:
  ARTIFACT_RETENTION_DAYS: 7

################################################################
# 1) Linux full matrix: GCC / Clang × C++17/20/23 (12 combos)
################################################################
jobs:
  linux-full:
    name: Linux – full (${{ matrix.label }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - compiler: g++-11
            std: 17
            label: gcc11-cxx17
          - compiler: g++-11
            std: 20
            label: gcc11-cxx20
          - compiler: g++-11
            std: 23
            label: gcc11-cxx23
          - compiler: g++-14
            std: 17
            label: gcc14-cxx17
          - compiler: g++-14
            std: 20
            label: gcc14-cxx20
          - compiler: g++-14
            std: 23
            label: gcc14-cxx23
          - compiler: clang++-15
            std: 17
            label: clang15-cxx17
          - compiler: clang++-15
            std: 20
            label: clang15-cxx20
          - compiler: clang++-15
            std: 23
            label: clang15-cxx23
          - compiler: clang++-18
            std: 17
            label: clang18-cxx17
          - compiler: clang++-18
            std: 20
            label: clang18-cxx20
          - compiler: clang++-18
            std: 23
            label: clang18-cxx23
      max-parallel: 4

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup env variables
        run: |
          echo "LABEL=${{ matrix.label }}" >> $GITHUB_ENV
          echo "COMPILER=${{ matrix.compiler }}" >> $GITHUB_ENV
          echo "CXX_STD=${{ matrix.std }}" >> $GITHUB_ENV

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ matrix.label }}-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install base deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends cmake ninja-build ccache build-essential pkg-config wget apt-transport-https ca-certificates gnupg lsb-release

      - name: Install compiler (GCC or Clang)
        run: |
          COMP="${{ matrix.compiler }}"
          if [[ "$COMP" == g++-* ]]; then
            VER=${COMP#g++-}
            sudo apt-get install -y gcc-${VER} g++-${VER} || true
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${VER} 100 || true
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${VER} 100 || true
          else
            CLANG_VER=${COMP#clang++-}
            # Add LLVM apt repo for specified clang version (jammy used for ubuntu-latest)
            wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - || true
            sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-${CLANG_VER} main" || true
            sudo apt-get update -y
            sudo apt-get install -y clang-${CLANG_VER} libc++-dev libc++abi-dev || true
          fi

      - name: Show compiler version
        run: |
          echo "gcc:"
          gcc --version || true
          echo "g++:"
          g++ --version || true
          echo "clang++:"
          clang++ --version || true

      - name: Configure (CMake)
        run: |
          set -e
          BUILD_DIR=build/${{ matrix.label }}
          mkdir -p $BUILD_DIR
          cd $BUILD_DIR
          if [[ "${{ matrix.compiler }}" == clang++-* ]]; then
            CLANG_VER=${{ matrix.compiler#clang++- }}
            export CC=/usr/bin/clang-${CLANG_VER}
            export CXX=/usr/bin/clang++-${CLANG_VER}
            CXX_FLAGS="-stdlib=libc++"
            EXE_LINK_FLAGS="-lc++abi"
          else
            export CC=/usr/bin/gcc
            export CXX=/usr/bin/g++
            CXX_FLAGS=""
            EXE_LINK_FLAGS=""
          fi
          cmake -G Ninja ../.. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER="$CC" \
            -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_CXX_FLAGS="$CXX_FLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$EXE_LINK_FLAGS" \
            -DCMAKE_CXX_STANDARD=${{ matrix.std }} \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DPTN_SKIP_COMPILER_CHECK=ON

      - name: Build
        run: |
          set -e
          cd build/${{ matrix.label }}
          ninja -v -j$(nproc) 2>&1 | tee ../../ci/results/build-${{ matrix.label }}.log

      - name: Test (ctest -> junit)
        run: |
          cd build/${{ matrix.label }}
          ctest --output-on-failure --output-junit test-results-${{ matrix.label }}.xml || true
          cp -v test-results-${{ matrix.label }}.xml ../../ci/results/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.label }}
          path: |
            ci/results/build-${{ matrix.label }}.log
            ci/results/test-results-${{ matrix.label }}.xml
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup build dir (optional)
        if: always()
        run: |
          rm -rf build/${{ matrix.label }} || true

  ################################################################
  # 2) macOS: Apple Clang + Homebrew clang variants
  ################################################################
  macos-build:
    name: macOS build
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: macos-applecxx17
            std: 17
            type: apple
          - label: macos-applecxx20
            std: 20
            type: apple
          - label: macos-clang15-cxx20
            std: 20
            type: homebrew
            clang_ver: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install deps (Homebrew)
        run: |
          # brew is preinstalled on macos-latest
          brew update || true
          brew install cmake ninja || true
          if [[ "${{ matrix.type }}" == "homebrew" ]]; then
            brew install llvm@${{ matrix.clang_ver }} || true
          fi

      - name: Build & test
        run: |
          set -e
          BUILD_DIR=build/${{ matrix.label }}
          mkdir -p $BUILD_DIR
          cd $BUILD_DIR
          if [[ "${{ matrix.type }}" == "apple" ]]; then
            cmake -G Ninja ../.. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF
          else
            # use Homebrew clang
            export PATH="/usr/local/opt/llvm@${{ matrix.clang_ver }}/bin:$PATH"
            cmake -G Ninja ../.. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF
          fi
          ninja -v -j2
          ctest --output-on-failure || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.label }}
          path: build/${{ matrix.label }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  ################################################################
  # 3) Windows: MSVC matrix (VS2019 & VS2022)
  ################################################################
  windows-build:
    name: Windows MSVC
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        vs: [ "Visual Studio 16 2019", "Visual Studio 17 2022" ]
    steps:
      - uses: actions/checkout@v4

      - name: Configure & Build (MSVC)
        shell: powershell
        run: |
          $vs = '${{ matrix.vs }}'
          $label = "windows-" + ($vs -replace ' ','-')
          $builddir = "build\$label"
          cmake -G "$vs" -A x64 -S . -B $builddir -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 -DPTN_SKIP_COMPILER_CHECK=ON
          cmake --build $builddir --config Release -- /m

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.vs }}
          path: build
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  ################################################################
  # 4) Sanitizers job (ASAN + UBSAN)
  ################################################################
  sanitizers:
    name: Sanitizers (ASAN/UBSAN)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y cmake ninja-build gcc-11 g++-11 || true

      - name: Build with ASAN/UBSAN
        run: |
          mkdir -p build/sanitizers
          cd build/sanitizers
          CC=gcc-11 CXX=g++-11 cmake -G Ninja ../.. -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer -g" \
            -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address,undefined" -DPTN_SKIP_COMPILER_CHECK=ON
          ninja -v -j2

      - name: Run tests under sanitizers
        run: |
          cd build/sanitizers
          # continue-on-error: sanitizers may fail tests (we still collect logs)
          ctest --output-on-failure || true

      - name: Upload sanitizers logs
        uses: actions/upload-artifact@v4
        with:
          name: sanitizers-logs
          path: build/sanitizers
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  ################################################################
  # 5) Static analysis: clang-format + clang-tidy
  ################################################################
  static-analysis:
    name: Static analysis (clang-format / clang-tidy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang-format clang-tidy cmake ninja-build python3-pip || true
          # optionally install run-clang-tidy via pip or apt if available

      - name: clang-format check
        run: |
          # Adjust patterns to your repo if needed
          files=$(git ls-files '*.hpp' '*.h' '*.cpp' '*.c' | tr '\n' ' ')
          if [ -z "$files" ]; then echo "no source files found"; else
            echo "$files" | xargs clang-format -style=file -n || (echo "clang-format check failed" && exit 1)
          fi

      - name: clang-tidy quick run
        run: |
          mkdir -p build/clang-tidy
          cd build/clang-tidy
          cmake -G Ninja ../.. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug || true
          # run-clang-tidy may not be available; run a limited set if present
          if command -v run-clang-tidy-10 >/dev/null 2>&1; then
            run-clang-tidy-10 -p . || true
          else
            echo "run-clang-tidy not available; skipping full tidy run"
          fi

      - name: Upload static-analysis result (if any)
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis
          path: build/clang-tidy
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  ################################################################
  # 6) Coverage: build + collect (upload coverage.info)
  ################################################################
  coverage:
    name: Coverage (lcov)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y lcov gcovr cmake ninja-build gcc-11 g++-11 || true

      - name: Build with coverage flags
        run: |
          mkdir -p build/coverage
          cd build/coverage
          CC=gcc-11 CXX=g++-11 cmake -G Ninja ../.. -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="--coverage -O0 -g" \
            -DCMAKE_EXE_LINKER_FLAGS="--coverage" -DPTN_SKIP_COMPILER_CHECK=ON
          ninja -v -j2 || true

      - name: Run tests
        run: |
          cd build/coverage
          ctest --output-on-failure || true

      - name: Generate lcov
        run: |
          cd build/coverage
          lcov --directory . --capture --output-file coverage.info || true
          lcov --remove coverage.info '/usr/*' --output-file coverage.info || true
          lcov --list coverage.info || true

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage/coverage.info
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name:
          Optional: upload to Codecov (requires secret)
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          files: build/coverage/coverage.info
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  ################################################################
  # 7) Release: build on tag push and upload release-artifact
  ################################################################
  release:
    name: Release build (on tag)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Build release artifacts
        run: |
          mkdir -p build/release
          cd build/release
          cmake -G Ninja ../.. -DCMAKE_BUILD_TYPE=Release -DPTN_SKIP_COMPILER_CHECK=ON
          ninja -v -j$(nproc)
      - name: Package artifacts
        run: |
          mkdir -p out
          cp -r build/release/* out/ || true
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifact
          path: out
          retention-days: 30
